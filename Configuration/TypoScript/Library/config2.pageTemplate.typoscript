// Database Readout and

# aktuelles BE-Layout holen
lib.templateTemplateName = TEXT
lib.templateTemplateName {
    # pagelayout sucht nach -> backend_layout, backend_layout_next_level in der RootLine
    data = pagelayout
    required = 1
    split {
        token = pagets__
        cObjNum = 1
        1.current = 1
    }
}

# Seite erzeugen...
# -------------------------------------------
page {
    # Body
    #------------------------------------------
    # Body-Tag mit Class individualisieren
    bodyTag >
    bodyTagCObject = COA
    bodyTagCObject {
        # PID der Seite ausgeben
        10 = TEXT
        10 {
            data = page:uid
            wrap = cp-page-|
        }

        # ID des FE-Layout ausgeben
        20 = TEXT
        20.data = page:layout
        20.stdWrap.noTrimWrap = | cp-felayout-||
        wrap = <body class="|">
    }

    # Prepare Templating
    #------------------------------------------
    1 = LOAD_REGISTER
    1.templateLayout.cObject = CASE
    1.templateLayout.cObject {
        // read Frontend-Layout
        key.data = page:layout

        default = TEXT
        default.value = Default

        0 = TEXT
        0.value = Default

    }

    # Template
    #------------------------------------------
    #<body>-section füllen mit Inhalt, abhängig von FE- und BE-Layout
    10 = FLUIDTEMPLATE
    10 {
        templateName < lib.templateTemplateName

        templateRootPaths.10 = EXT:testext/Resources/Private/Templates/
        partialRootPaths.10 = EXT:testext/Resources/Private/Partials/
        layoutRootPaths.10 = EXT:testext/Resources/Private/Layouts/
        variables {
        }
    }

    11 = RESTORE_REGISTER
}
